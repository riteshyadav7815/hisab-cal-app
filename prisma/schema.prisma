generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  userNumber    Int           @unique @default(autoincrement())
  name          String?
  username      String?       @unique
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isActive      Boolean       @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  expenses      Expense[]
  friendships   Friendship[]  @relation("UserFriendships")
  transactions  Transaction[]
  stats         UserStats?

  @@index([email])
  @@index([username])
  @@index([isActive])
  @@index([createdAt])
  @@index([userNumber])
  @@map("users")
}

model Friend {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String?
  avatar       String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  friendships  Friendship[]  @relation("FriendFriendships")
  transactions Transaction[]

  @@index([name])
  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@map("friends")
}

model Friendship {
  id                String        @id @default(cuid())
  userId            String
  friendId          String
  balance           Float         @default(0)
  lastTransactionAt DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  friend            Friend        @relation("FriendFriendships", fields: [friendId], references: [id], onDelete: Cascade)
  user              User          @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@index([balance])
  @@index([lastTransactionAt])
  @@map("friendships")
}

model Expense {
  id          String   @id @default(cuid())
  userId      String
  title       String
  amount      Float
  category    String
  description String?
  photo       String?
  tags        String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([date])
  @@index([amount])
  @@index([createdAt])
  @@map("expenses")
}

model Transaction {
  id           String     @id @default(cuid())
  userId       String
  friendId     String
  friendshipId String
  amount       Float
  type         String
  description  String?
  reference    String?
  date         DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  friendship   Friendship @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  friend       Friend     @relation(fields: [friendId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([friendId])
  @@index([friendshipId])
  @@index([type])
  @@index([date])
  @@index([createdAt])
  @@map("transactions")
}

model UserStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  totalExpenses     Float    @default(0)
  totalIncome       Float    @default(0)
  totalOwed         Float    @default(0)
  totalOwing        Float    @default(0)
  friendsCount      Int      @default(0)
  expensesCount     Int      @default(0)
  transactionsCount Int      @default(0)
  lastCalculated    DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([key])
  @@index([expiresAt])
  @@map("cache_entries")
}